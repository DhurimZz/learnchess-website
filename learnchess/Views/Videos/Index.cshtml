@using ContosoUniversity
@model PaginatedList<Videos>
@{
	ViewData["Title"] = "Index";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h1>CRUD Videos Index</h1>

<p>
	<a asp-action="Create" type="button" class="btn btn-outline-primary">Create New</a>
</p>
<form asp-action="Index" method="get">
	<div class="form-actions no-color">
		<p>
			Find by title: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
			<input type="submit" value="Search" class="btn btn-default" /> |
			<a asp-action="Index">Back to Full List</a>
		</p>
	</div>
</form>
<div class="row">
	<div class="col">
		<table class="table table-dark table-hover rounded shadow-sm">
			<thead>
				<tr>
					<th scope="col">
						Video
					</th>
					<th>
						<a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]" class="text-decoration-none ">Title</a>
					</th>
					<th>
						Description
					</th>
					<th scope="col">
						Url
					</th>
					<th scope="col"></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var item in Model)
				{
					<tr>
						<td>
							 <img  id="photo" class="card-img-top" alt="..." style="width:150px;height:100px;" src="@Html.DisplayFor(modelItem => item.Video)"/>
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.Title)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.Description)
						</td>
						<td>
							@Html.DisplayFor(modelItem => item.Url)
						</td>
						<td>
							<a asp-action="Edit" asp-route-id="@item.VideosId" type="button" class="btn btn-outline-info my-1">Edit</a> |
							<a asp-action="Details" asp-route-id="@item.VideosId" type="button" class="btn btn-outline-secondary my-1">Details</a> |
							<a asp-action="Delete" asp-route-id="@item.VideosId" type="button" class="btn btn-outline-danger my-1">Delete</a>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>

